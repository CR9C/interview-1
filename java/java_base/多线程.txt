【多线程】
1.如果做 java web 方面开发的话几乎用不到多线程！因为有多线程的地方 servlet 容器或者其他开发框架都已经实现掉了！
	 一般在网络应用程序中使用多线程的地方非常多！

	以多线程来提高效率的场景一般在 CPU 计算型，而不是在 IO 读写型。CPU 可以会有多个核心并行处理计算，但是磁盘 IO 就没这功能了，磁头只有一个，根本不可能靠多线程提高效率！
	 一般来说，磁盘 IO 的并发能力为 0，也就是说无法支持并发！网络 IO 的话由于带宽的限制的，使用多线程处理最多也只能达到带宽的极值。
	 对于磁盘 IO 来说，多线程可以用于一个线程专门用于读写文件，其他的线程用于对读取数据进行处理，这样才有可能更好地利用 CPU 资源。

	还有一种极为普遍的使用多线程的场景是UI编程,一般UI界面绘制于主线程,为了不阻塞主线程让用户体验更流畅,需要创建单独的线程处理耗时操作,处理完了再更新主界面,典型的案例就是android应用开发 

2.常见面试题
第一题：线程的基本概念、线程的基本状态及状态之间的关系？
	线程，有时称为轻量级进程，是CPU使用的基本单元；它由线程ID、程序计数器、寄存器集合和堆栈组成。它与属于同一进程的其他线程共享其代码段、数据段和其他操作系统资源（如打开文件和信号）。

	线程有四种状态：新生状态、可运行状态、被阻塞状态、死亡状态。状态之间的转换如下图所示：

第二题：线程与进程的区别？
	1、 线程是进程的一部分，所以线程有的时候被称为是轻权进程或者轻量级进程。
	2、一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的
	3、系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。那就是说，出了CPU之外（线程在运行的时候要占用CPU资源），计算机内部的软硬件资源的分配与线程无关，线程只能共享它所属进程的资源。
	4、 与进程的控制表PCB相似，线程也有自己的控制表TCB，但是TCB中所保存的线程状态比PCB表中少多了。
	5、 进程是系统所有资源分配时候的一个基本单位，拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。

第三题：多线程有几种实现方法，都是什么？
	1. 继承 Thread 类
	2. 实现 Runnable 接口再 new Thread(YourRunnableOjbect) 

第四题：多线程同步和互斥有几种实现方法，都是什么？
	用户模式下的方法有：原子操作（例如一个单一的全局变量），临界区。内核模式下的方法有：事件，信号量，互斥量。

第五题：多线程同步和互斥有何异同，在什么情况下分别使用他们？举例说明。
	线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。
	线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步（下文统称为同步）。

3.经典面试题
问题一：进程和线程的区别
	解答：一个进程对应一个程序的执行，而一个线程则是进程执行过程中的一个单独的执行序列，一个进程可以包含多个线程。线程有时候也被称为轻量级进程.

	一个Java虚拟机的实例运行在一个单独的进程中，不同的线程共享Java虚拟机进程所属的堆内存。这也是为什么不同的线程可以访问同一个对象。线程彼此共享堆内存并保有他们自己独自的栈空间。这也是为什么当一个线程调用一个方法时，他的局部变量可以保证线程安全。但堆内存并不是线程安全的，必须通过显示的声明同步来确保线程安全。

问题二:列举几种不同的创建线程的方法.
	解答:可以通过如下几种方式：
	•  继承Thread 类
	•  实现Runnable 接口
	•  使用Executor framework (这会创建一个线程池)

	通过线程池来创建更有效率。
	 相关链接: learn why and how to create pool of  threads using the executor framework

问题三：推荐通过哪种方式创建线程，为什么?
	解答：最好使用Runnable接口，这样你的类就不必继承Thread类.
	不然当你需要多重继承的时候，你将一筹莫展（我们都知道Java中的类只能继承自一个类，但可以同时实现多个接口）。
	在上面的例子中，因为我们要继承Base类，所以实现Runnable接口成了显而易见的选择。
	同时你也要注意到在不同的例子中，线程是如何启动的。
	按照面向对象的方法论，你应该只在希望改变父类的行为的时候才去继承他。
	通过实现Runnable接口来代替继承Thread类可以告诉使用者Counter是Base类型的一个对象，并会作为线程执行。

问题四：简要的说明一下高级线程状态.
	解答：下图说明了线程的各种状态.
	•可执行(Runnable)：当调用start()方法后，一个线程变为可执行状态，但是并不意味着他会立刻开始真正地执行。而是被放入线程池，由线程调度器根据线程优先级决定何时挂起执行。

	执行中(Running)：处理器已经在执行线程的代码。他会一直运行直到被阻断，或者通过静态方法Thread.yield()自行放弃执行的机会，考虑到场景切换所带来的开销，yield()方法不应该被经常调用。
	• 等待中(Waiting)：线程由于等待I/O等外部进程的处理结果而处于被阻断的状态，调用currObject.wait( )方法会使得当前线程进入等待状态，直到其它线程调用currObject.notify() 或者currObject.notifyAll() 。
	• 睡眠中(Sleeping)：重载方法Thread.sleep(milliseconds)，Thread.sleep(milliseconds， nanoseconds)可以迫使Java线程进入睡眠状态（挂起）。
	• 由于I/O阻塞（Blocked on I/O）：当I/O条件发生变化时（例如读取了几个字节的数据）会迁移到可执行状态。
	• 由于同步阻塞中（Blocked on synchronization）: 当获取锁之后会进入执行中状态。

	Thread.State  枚举类型包含了Java虚拟机支持的全部的线程状态类型，下面几点Java的线程宗旨确保了这些线程状态成为可能。
	• 对象可以被任何线程共享和修改。
	• 线程调度器的抢占性特性，使得线程可以随时在/不在多核处理之间切换处理器内核，这意味着方法可以在执行的过程中切换状态。否则方法中的死循环将永远阻塞CPU，并且使得不同线程的其他方法始终得不到执行。
	• 为了防止线程安全问题，那些脆弱的方法或者代码块可以被锁定。这使得线程可以处于被锁定或者加锁请求处理中两种状态。
	• 线程在处理I/O资源（如Sockets，文件句柄，数据库连接等）时会进入等待状态，
	• 处于I/O读写中的线程不能被切换，因此他们或者以成功/失败的结果正常完成处理，或者其它线程关闭了相应的资源，迫使他进入死亡或者完成的状态。这也是为什么一个合理的超时时间可以避免线程由于I/O处理而被永远阻塞，从而导致严重的性能问题。
	• 线程可以进入睡眠状态，以使得其他处于等待状态的线程有机会执行。

问题五：yield和sleeping有何区别，sleep()和wait()有何区别？
	解答：当一个任务调用了yield()方法，它将从执行中状态转变为可执行。而当一个任务调用了sleep()，则将从执行中状态转变为等待中/睡眠中状态。
	 方法wait(1000)使得当前线程睡眠1秒钟，但调用notify() 或者notifyAll()会随时唤醒线程。而sleep(1000)则会导致当前线程休眠1秒钟。

问题六：为什么为了线程安全而锁定一个方法或者一个代码块称为“同步”而不是“锁定”或者“被锁定”
	解答：当某个方法或者代码块被声明为”synchronized”后，保存数据的内存空间（例如堆内存）将保持被同步状态。
	 这意味着：当一个线程获取锁并且执行到已被声明为synchronized的方法或者代码块时，该线程首先从主堆内存空间中读取该锁定对象的所有变化，以确保其在开始执行之前拥有最新的信息。在synchronized部分执行完毕，线程准备释放锁的时候，所有针对被锁定对象的修改都将为写入主堆内存中。这样其他线程在请求锁的时候就可以获取最新的信息。

问题七：线程如何进行的同步处理？你可以列举出那些同步级别？同步方法和代码块如何区别？
	解答：在Java语言中，每个对象都有一个锁，一个线程可以通过关键字synchronized来申请获取某个对象的锁.
	关键字synchronized可以被用于方法（粗粒度锁，对性能影响较大）或代码块（细粒度锁）级别。
	锁定方法往往不是一个很好的选择，取而代之的我们应该只锁定那些访问共享资源的代码块.
	因为每一个对象都有一个锁，所以可以通过创建虚拟对象来实现代码块级别的同步，方法块级别的锁比锁定整个方法更有效。

	Java虚拟机灵活的使用锁和监视器，一个监视器总体来说就是一个守卫者，他负责确保只有一个线程会在同一时间执行被同步的代码。
	每个监视器对应一个对象的引用，在线程执行代码块的第一条指令之前，他必须持有该引用对象的锁，否则他将无法执行这段代码。
	一旦他获得锁，该线程就可以进入这段受到保护的代码。
	当线程不论以何种方式退出代码块时，他都将释放关联对象的锁。对于静态方法，需要请求类级别的锁。